{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dAEclipse Python Package Reference For reference on the daeclipse python package implementation, see the PDoc-generated documentation . API Reference For the crowd-sourced, unofficial OpenAPI spec for the DeviantArt Eclipse API, see the ReDoc-generated documentation .","title":"Home"},{"location":"#daeclipse","text":"","title":"dAEclipse"},{"location":"#python-package-reference","text":"For reference on the daeclipse python package implementation, see the PDoc-generated documentation .","title":"Python Package Reference"},{"location":"#api-reference","text":"For the crowd-sourced, unofficial OpenAPI spec for the DeviantArt Eclipse API, see the ReDoc-generated documentation .","title":"API Reference"},{"location":"about/","text":"About Caveats / Disclaimer DeviantArt's history as a website is storied. Prior to the release of Eclipse, there were two options with creating tooling around its UI: - The Public DeviantArt API . See accompanying Python wrapper . The API is relatively easy to use - and utilizes OAuth2 for authentication - but its endpoints and functionality are sparce. It also was not updated for some time but now appears to be getting a handful of new endpoints based on the changelog. - The internal DeviantArt Interactive Fragment Interface (DiFi) . DiFi has a wide range of functionality but is volatile/unreliable and difficult to use - especially compared to modern APIs. On October 2019, DeviantArt announced DeviantArt Eclipse , a new UI (mostly) built in React. There are still a handful of pages on the website that expose the old website (i.e. https://www.deviantart.com/groups/) where functionality hasn't been completely ported. But with the new React UI brought along a third option for tooling: - The internal DeviantArt NAPI , currently undocumented. The structure of its endpoints resembles RESTful practices, and authentication is done through scraping a CSRF token on the website or using a user's stored .deviantart.com cookies. The implementation in this library relies on the DeviantArt NAPI. As such, functionality may break without warning depending on whether the internal DeviantArt team makes changes to these endpoints.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#caveats-disclaimer","text":"DeviantArt's history as a website is storied. Prior to the release of Eclipse, there were two options with creating tooling around its UI: - The Public DeviantArt API . See accompanying Python wrapper . The API is relatively easy to use - and utilizes OAuth2 for authentication - but its endpoints and functionality are sparce. It also was not updated for some time but now appears to be getting a handful of new endpoints based on the changelog. - The internal DeviantArt Interactive Fragment Interface (DiFi) . DiFi has a wide range of functionality but is volatile/unreliable and difficult to use - especially compared to modern APIs. On October 2019, DeviantArt announced DeviantArt Eclipse , a new UI (mostly) built in React. There are still a handful of pages on the website that expose the old website (i.e. https://www.deviantart.com/groups/) where functionality hasn't been completely ported. But with the new React UI brought along a third option for tooling: - The internal DeviantArt NAPI , currently undocumented. The structure of its endpoints resembles RESTful practices, and authentication is done through scraping a CSRF token on the website or using a user's stored .deviantart.com cookies. The implementation in this library relies on the DeviantArt NAPI. As such, functionality may break without warning depending on whether the internal DeviantArt team makes changes to these endpoints.","title":"Caveats / Disclaimer"},{"location":"development/","text":"Development Python-Related Code Development Overview The /daeclipse folder contains the contents of the daeclipse Python package. The purpose of the package is to conveniently wrap DeviantArt Eclipse API calls, similar to an SDK. poetry is used for Python dependency management and packaging. Development To get started, make sure to install poetry dependencies at the root. poetry install Testing There are no tests for any of the above written code yet. Linting Code for all of the above follows the wemake-python-styleguide guidelines. This is also automatically checked via the GitHub Actions workflow linter-python.yml . Linting can be run locally via the below command at root, although the local linter is more restrictive than the GitHug Actiions linter: flake8 Documentation pdoc is used for automated Python documentation generation. All documentation is generated on the main branch into a build/python/ folder, which is then deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml . Publishing The GitHub Actions workflow pypi.yml uses JRubics/poetry-publish to publish the daeclipse folder contents to pypi.org. Releases are published after a release is tagged on GitHub, formatted as v*.*.* . OpenAPI Spec Development Overview The /spec folder contains the modularized OpenAPI spec to document how the DeviantArt Eclipse API behaves. Implementation is based on dgarcia360/openapi-boilerplate . Development To get started, make sure to install node dependencies at the root. npm install The below command bundles the spec as one .yaml file. npm run build The minified document is stored in _build/api/openapi.yaml . Testing The below command checks if the document follows the OpenAPI 3.0 Specification. npm run test The below command builds a docs site so that you can view the rendering on your local browser. npm run preview The server starts on http://127.0.0.1:8080 You can optionally also generate the HTML and view index.html . npm run html Linting Courtesy of the boilerplate repo, the OpenAPI Spec is linted using Spectral . This is also automatically checked via the GitHub Actions workflow linter-openapi.yml . OpenAPI linting can also be performed locally by running the below command to check if the document follows the OpenAPI 3.0 Specification. npm run test Documentation redoc is used for automated OpenAPI documentation generation, courtesy of the boilerplate. All documentation is generated on the main branch into a build/api/ folder, which is then deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml . Publishing The OpenAPI ReDoc documentation is deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml . Docs Overview The documentation that links to the separate specific documentation is stored as Markdown files in docs/ . mkdocs takes the contents and formats as a helpful documentation site via GitHub Pages and the GitHub Actions workflow gh-pages.yml . Testing To preview the docs/ folder as the HTML site locally: mkdocs build The command will generate a build/ folder containing the website contents. Publishing The full documentation is deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml .","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#python-related-code-development","text":"","title":"Python-Related Code Development"},{"location":"development/#overview","text":"The /daeclipse folder contains the contents of the daeclipse Python package. The purpose of the package is to conveniently wrap DeviantArt Eclipse API calls, similar to an SDK. poetry is used for Python dependency management and packaging.","title":"Overview"},{"location":"development/#development_1","text":"To get started, make sure to install poetry dependencies at the root. poetry install","title":"Development"},{"location":"development/#testing","text":"There are no tests for any of the above written code yet.","title":"Testing"},{"location":"development/#linting","text":"Code for all of the above follows the wemake-python-styleguide guidelines. This is also automatically checked via the GitHub Actions workflow linter-python.yml . Linting can be run locally via the below command at root, although the local linter is more restrictive than the GitHug Actiions linter: flake8","title":"Linting"},{"location":"development/#documentation","text":"pdoc is used for automated Python documentation generation. All documentation is generated on the main branch into a build/python/ folder, which is then deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml .","title":"Documentation"},{"location":"development/#publishing","text":"The GitHub Actions workflow pypi.yml uses JRubics/poetry-publish to publish the daeclipse folder contents to pypi.org. Releases are published after a release is tagged on GitHub, formatted as v*.*.* .","title":"Publishing"},{"location":"development/#openapi-spec-development","text":"","title":"OpenAPI Spec Development"},{"location":"development/#overview_1","text":"The /spec folder contains the modularized OpenAPI spec to document how the DeviantArt Eclipse API behaves. Implementation is based on dgarcia360/openapi-boilerplate .","title":"Overview"},{"location":"development/#development_2","text":"To get started, make sure to install node dependencies at the root. npm install The below command bundles the spec as one .yaml file. npm run build The minified document is stored in _build/api/openapi.yaml .","title":"Development"},{"location":"development/#testing_1","text":"The below command checks if the document follows the OpenAPI 3.0 Specification. npm run test The below command builds a docs site so that you can view the rendering on your local browser. npm run preview The server starts on http://127.0.0.1:8080 You can optionally also generate the HTML and view index.html . npm run html","title":"Testing"},{"location":"development/#linting_1","text":"Courtesy of the boilerplate repo, the OpenAPI Spec is linted using Spectral . This is also automatically checked via the GitHub Actions workflow linter-openapi.yml . OpenAPI linting can also be performed locally by running the below command to check if the document follows the OpenAPI 3.0 Specification. npm run test","title":"Linting"},{"location":"development/#documentation_1","text":"redoc is used for automated OpenAPI documentation generation, courtesy of the boilerplate. All documentation is generated on the main branch into a build/api/ folder, which is then deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml .","title":"Documentation"},{"location":"development/#publishing_1","text":"The OpenAPI ReDoc documentation is deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml .","title":"Publishing"},{"location":"development/#docs","text":"","title":"Docs"},{"location":"development/#overview_2","text":"The documentation that links to the separate specific documentation is stored as Markdown files in docs/ . mkdocs takes the contents and formats as a helpful documentation site via GitHub Pages and the GitHub Actions workflow gh-pages.yml .","title":"Overview"},{"location":"development/#testing_2","text":"To preview the docs/ folder as the HTML site locally: mkdocs build The command will generate a build/ folder containing the website contents.","title":"Testing"},{"location":"development/#publishing_2","text":"The full documentation is deployed to the gh-pages branch via the GitHub Actions workflow gh-pages.yml .","title":"Publishing"}]}