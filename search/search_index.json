{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dAEclipse Python Package Reference For reference on the daeclipse python package implementation, see the PDoc-generated documentation . API Reference For the crowd-sourced, unofficial OpenAPI spec for the DeviantArt Eclipse API, see the ReDoc-generated documentation .","title":"Home"},{"location":"#daeclipse","text":"","title":"dAEclipse"},{"location":"#python-package-reference","text":"For reference on the daeclipse python package implementation, see the PDoc-generated documentation .","title":"Python Package Reference"},{"location":"#api-reference","text":"For the crowd-sourced, unofficial OpenAPI spec for the DeviantArt Eclipse API, see the ReDoc-generated documentation .","title":"API Reference"},{"location":"about/","text":"About Caveats / Disclaimer DeviantArt's history as a website is storied. Prior to the release of Eclipse, there were two options with creating tooling around its UI: - The Public DeviantArt API . See accompanying Python wrapper . The API is relatively easy to use - and utilizes OAuth2 for authentication - but its endpoints and functionality are sparce. It also was not updated for some time but now appears to be getting a handful of new endpoints based on the changelog. - The internal DeviantArt Interactive Fragment Interface (DiFi) . DiFi has a wide range of functionality but is volatile/unreliable and difficult to use - especially compared to modern APIs. On October 2019, DeviantArt announced DeviantArt Eclipse , a new UI (mostly) built in React. There are still a handful of pages on the website that expose the old website (i.e. https://www.deviantart.com/groups/) where functionality hasn't been completely ported. But with the new React UI brought along a third option for tooling: - The internal DeviantArt NAPI , currently undocumented. The structure of its endpoints resembles RESTful practices, and authentication is done through scraping a CSRF token on the website or using a user's stored .deviantart.com cookies. The implementation in this library relies on the DeviantArt NAPI. As such, functionality may break without warning depending on whether the internal DeviantArt team makes changes to these endpoints.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#caveats-disclaimer","text":"DeviantArt's history as a website is storied. Prior to the release of Eclipse, there were two options with creating tooling around its UI: - The Public DeviantArt API . See accompanying Python wrapper . The API is relatively easy to use - and utilizes OAuth2 for authentication - but its endpoints and functionality are sparce. It also was not updated for some time but now appears to be getting a handful of new endpoints based on the changelog. - The internal DeviantArt Interactive Fragment Interface (DiFi) . DiFi has a wide range of functionality but is volatile/unreliable and difficult to use - especially compared to modern APIs. On October 2019, DeviantArt announced DeviantArt Eclipse , a new UI (mostly) built in React. There are still a handful of pages on the website that expose the old website (i.e. https://www.deviantart.com/groups/) where functionality hasn't been completely ported. But with the new React UI brought along a third option for tooling: - The internal DeviantArt NAPI , currently undocumented. The structure of its endpoints resembles RESTful practices, and authentication is done through scraping a CSRF token on the website or using a user's stored .deviantart.com cookies. The implementation in this library relies on the DeviantArt NAPI. As such, functionality may break without warning depending on whether the internal DeviantArt team makes changes to these endpoints.","title":"Caveats / Disclaimer"}]}